#import Libraries
from gpiozero import Servo
from gpiozero import AngularServo
import time
import rospy
from std_msgs.msg import UInt8
from std_msgs.msg import String
import subprocess
#
servo_pin = 12 # Change this to pin of choice (within reason)
#
#Set Pin X as am ouput and set servo one as pin X as PWM
servo = AngularServo(servo_pin, min_angle=0, max_angle=180, min_pulse_width=0.00005, max_pulse_width=0.0025) #GPIO 12
#
# after the unit testing, the duty cycle of the DF9GMS is between 2 and 12
# therefor, 2 is 0 degrees. 12 is 180 degrees of the duty cycle
#
#
# Function to vocalize text using espeak
#def speak(text):
#    subprocess.run(['espeak', text])


# # Publisher for the text to be spoken
# speak_pub = None

# # Function to vocalize text using espeak and publish the text to a ROS topic
# def speak(text):
#     global speak_pub
#     subprocess.run(['espeak', text])  # Vocalize the text
#     if speak_pub:
#         speak_pub.publish(text)  # Publish the text to the ROS topic

# #
servo.angle = None
#
def callback(msg):
    rospy.loginfo("Message received")
    #Payload command key
    #Original position: 0b00000000 (0)
    #Drop Epi pen:      0b00000001 (1)
    #Drop Tracker:      0b00000010 (2)

    speaker = String()
#
    if msg.data == 1:
        servo.angle = 135
        rospy.sleep(rospy.Duration(3))
        servo.angle = None
        rospy.loginfo("Tracker was deployed")
        speaker.data = "[Tracker was deployed]"
        #speak("Tracker was deployed")
#    
    elif msg.data == 2:
        servo.angle = 45
        rospy.sleep(rospy.Duration(3))
        servo.angle = None
        rospy.loginfo("Epi-Pen was deployed")
        speaker.data = "[Epi-Pen was deployed]"
        #speak("Epi-Pen was deployed")
#
    elif msg.data == 3:
        servo.angle = 90
        rospy.sleep(rospy.Duration(3))
        servo.angle = None
        rospy.loginfo("payload ready")
        speaker.data = "[Payload Ready]"
#
    else:
        rospy.loginfo("Unidentified message")
        speaker.data = "[Unidentified message]"
        #speak("Unidentified message")
#   
# Publish espeak data to GCS
    speak_pub.publish(speaker)
#
def main():
    global speak_pub 

    # Initialize ROS node
    rospy.init_node('servo_controller_node')
    rospy.loginfo("Payload Setup")

    # Set up the publisher for spoken text on the 'spoken_text' topic
    speak_pub = rospy.Publisher('spoken_text', String, queue_size=10)
    #
    rospy.Subscriber('payloadcommands', UInt8, callback)
    rospy.loginfo("Message Ready")
    #
    # Keep the node alive
    rospy.spin()
#
#
if __name__ == '__main__':
    main()
